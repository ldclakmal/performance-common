# ----------------------------------------------------------------------------
#
# Copyright (c) 2018, WSO2 Inc. (http://wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# ----------------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template to run performance tests. This template
  creates Amazon EC2 instances in a VPC. The JMeter Client EC2 instance will be in a
  public subnet with a public IP. All other EC2 instances will be in a private subnet.
  **WARNING** This template creates multiple Amazon AWS resources. You will be
  billed for the AWS resources used if you create a stack from this template.
##############################################################################################
# Mappings for Ubuntu AMIs.
# Refer https://cloud-images.ubuntu.com/locator/ec2/ for ubuntu AMI-ID's for the LTS version
# Search using "bionic us- hvm:ebs-ssd amd64"
##############################################################################################
Mappings:
  AWSRegion2AMI:
    {{ region }}:
      AMI: {{ ami_id }}
#############################
# User inputs
#############################
Parameters:
  UserEmail:
    Type: String
    Description: Email address of the user creating this stack
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    ConstraintDescription: You should enter a valid email
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  BucketName:
    Description: Name of bucket containing files
    Type: String
  BucketRegion:
    Description: The region of the bucket
    Type: String
  PerformanceDistributionName:
    Description: The name of the 'Performance Distribution' package in S3 Bucket.
    Type: String
  JMeterDistributionName:
    Description: The name of the 'Apache JMeter distribution' in S3 Bucket.
    Type: String
    ConstraintDescription: must be a valid tgz package
    AllowedPattern: ^.*\.tgz$
  OracleJDKDistributionName:
    Description: The name of the 'Oracle JDK Distribution' in S3 Bucket.
    Type: String
    ConstraintDescription: must be a valid Oracle JDK
    AllowedPattern: ^jdk-8u[0-9]+-linux-x64.tar.gz$
  JMeterClientInstanceType:
    Description: JMeter Client EC2 instance type
    Type: String
  JMeterServerInstanceType:
    Description: JMeter Server EC2 instance type
    Type: String
  {% block parameters %}{% endblock %}
################################
# Create AWS resources
################################
Resources:
  #########################################
  # Create IAM resources to read S3 bucket
  #########################################
  CfnUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:DescribeStackResource'
                  - 's3:GetObject'
                Resource: '*'
  CfnKeys:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref CfnUser
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Id: MyPolicy
        Statement:
          - Sid: ReadAccess
            Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref BucketName
                - /*
            Principal:
              AWS: !GetAtt
                - CfnUser
                - Arn
      Bucket: !Ref BucketName
{% if enable_cloudwatch_logs %}
  ####################################################################
  # Create IAM resources to configure AWS Logs Agent in EC2 instances
  ####################################################################
  LogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: 'arn:aws:logs:*:*:*'
  LogRoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref LogRole
  # Logs Group
  CloudFormationLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref AWS::StackName
          - 'CloudFormationLogs'
      RetentionInDays: 7
{% endif -%}
  ##########################################################################################
  # Create VPC, public subnet and private subnet
  # https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario2.html
  # https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Internet_Gateway.html
  ##########################################################################################
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'VPC'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  # Configure Public Subnet
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PublicSubnet'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'InternetGateway'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PublicRouteTable'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  # Configure Private Subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PrivateSubnet'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatGatewayIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'NatGateway'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  NatGatewayIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PrivateRouteTable'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security Group for EC2 instances
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  {% block resources %}{% endblock %}
  #######################
  # EC2 Instances
  #######################
{%- macro ec2instance(resource_name, name, instance_type, files=[], public=false, volume_size=None) %}
  {{ resource_name }}:
    Type: 'AWS::EC2::Instance'
    DependsOn: [InternetGatewayAttachment, BucketPolicy]
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            {%- if enable_cloudwatch_logs %}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/awslogs/state/agent-state

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/{{ name }}/cloud-init.log
                datetime_format = %Y-%m-%d %H:%M:%S

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/{{ name }}/cloud-init-output.log
                datetime_format =

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/{{ name }}/cfn-init.log
                datetime_format = %Y-%m-%d %H:%M:%S

                [/var/log/cfn-init-cmd.log]
                file = /var/log/cfn-init-cmd.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/{{ name }}/cfn-init-cmd.log
                datetime_format = %Y-%m-%d %H:%M:%S

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/{{ name }}/cfn-wire.log
                datetime_format = %Y-%m-%d %H:%M:%S

                [/var/log/syslog]
                file = /var/log/syslog
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {instance_id}/{{ name }}/syslog
                datetime_format = %b %d %H:%M:%S
              mode: '000444'
              owner: root
              group: root
            {%- endif %}
            /home/ubuntu/performance-distribution.tar.gz:
              source: !Join
                - ''
                - - 'https://s3.'
                  - !Ref BucketRegion
                  - '.amazonaws.com/'
                  - !Ref BucketName
                  - /
                  - !Ref PerformanceDistributionName
              mode: '000664'
              owner: ubuntu
              group: ubuntu
              authentication: "S3AccessCreds"
            /home/ubuntu/private_key.pem:
              source: !Join
                - ''
                - - 'https://s3.'
                  - !Ref BucketRegion
                  - '.amazonaws.com/'
                  - !Ref BucketName
                  - /
                  - !Ref KeyName
                  - .pem
              mode: '000400'
              owner: ubuntu
              group: ubuntu
              authentication: "S3AccessCreds"
            {%- for file in files %}
            /home/ubuntu/{{ file['name'] }}:
              source: !Join
                - ''
                - - 'https://s3.'
                  - !Ref BucketRegion
                  - '.amazonaws.com/'
                  - !Ref BucketName
                  - /
                  - !Ref {{ file['ref'] }}
              mode: '000664'
              owner: ubuntu
              group: ubuntu
              authentication: "S3AccessCreds"
            {%- endfor %}
          {%- if enable_cloudwatch_logs %}
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
            02_download_awslogs_agent:
              command: curl -s https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
              cwd: /root
            03_change_permission:
              command: chmod +x ./awslogs-agent-setup.py
              cwd: /root
            04_install_awslogs_agent:
              command: !Join
                - ''
                - - './awslogs-agent-setup.py -n -r '
                  - !Ref 'AWS::Region'
                  - ' -c /etc/awslogs/awslogs.conf'
              cwd: /root
          {%- endif %}
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          accessKeyId: !Ref CfnKeys
          secretKey: !GetAtt
            - CfnKeys
            - SecretAccessKey
          buckets:
            - !Ref BucketName
    Properties:
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", AMI ]
      InstanceType: {{ instance_type }}
      KeyName: !Ref KeyName
      {%- if enable_cloudwatch_logs %}
      IamInstanceProfile: !Ref LogRoleInstanceProfile
      {%- endif %}
      {%- if volume_size %}
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: {{ volume_size }}
      {%- endif %}
      Tags:
        - Key: Name
          Value: '{{ name }}'
        - Key: User
          Value: !Ref UserEmail
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          {%- if public %}
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref PublicSubnet
          {% else %}
          AssociatePublicIpAddress: 'false'
          SubnetId: !Ref PrivateSubnet
          {% endif -%}
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "running server hostname: "`hostname`
          echo "running server public ip: "`curl ifconfig.me`
          echo "running server /etc/hosts: "`cat /etc/hosts`
          export DEBIAN_FRONTEND=noninteractive
          sleep 2m
          ping -c 5 google.com
          apt-get update
          # Install required packages
          apt-get -y -q -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install python-pip jq zip unzip
          # Install AWS CloudFormation Helper Scripts
          mkdir aws-cfn-bootstrap-latest
          curl -s https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz -O
          pip install aws-cfn-bootstrap-latest.tar.gz
          tar xzf aws-cfn-bootstrap-latest.tar.gz -C aws-cfn-bootstrap-latest --strip-components 1
          ln -s aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          # Initialize
          /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource {{ resource_name }} --region ${AWS::Region}
          # Extract distribution
          tar xzf /home/ubuntu/performance-distribution.tar.gz -C /home/ubuntu
          {% if caller is defined -%}
          # Must run setup script in User Data (Commands executed within cfn-init do not show the progress in logs)
          # Run setup
          {{ caller()|indent(10) }}
          {% endif -%}
          # Write system information
          mkdir /home/ubuntu/system-info
          /home/ubuntu/cloudformation/write-system-information.sh -o /home/ubuntu/system-info/
          # Signal
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource {{ resource_name }} --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
{%- endmacro %}
{% block ec2instances %}
{% endblock %}
{% if start_bastion %}
{{ ec2instance('BastionInstance', 'bastion', 't3.nano', public=True) }}
{% endif -%}
Outputs:
  VPC:
    Description: The ID of the VPC
    Value: !Ref VPC
{%- if start_bastion %}
  BastionPublicIP:
    Description: Bastion Public IP
    Value: !GetAtt BastionInstance.PublicIp
{%- endif %}
{%- block outputs %}
{%- endblock %}
